plugins {
    id 'multiloader-loader'
    id 'net.neoforged.moddev'
}

neoForge {
    version = neoforge_version
    // Automatically enable neoforge AccessTransformers if the file exists
    def at = project(':common').file('src/main/resources/META-INF/accesstransformer.cfg')
    if (at.exists()) {
        accessTransformers.add(at.absolutePath)
    }
    parchment {
        minecraftVersion = parchment_minecraft
        mappingsVersion = parchment_version
    }
    runs {
        configureEach {
            systemProperty "neoforge.enabledGameTestNamespaces", mod_id.toString()
            ideName = "NeoForge ${it.name.capitalize()} (${project.path})" // Unify the run config names with fabric
            systemProperty "xinexlib.dev", "true"
        }
        client {
            client()
        }
        data {
            data()
        }
        server {
            server()
        }
    }
    mods {
        "${mod_id}" {
            sourceSet sourceSets.main
        }
    }
}

dependencies {
    implementation(group: 'io.projectreactor', name: 'reactor-core', version: '3.5.5')

    implementation group: "io.github.llamalad7", name: 'mixinextras-neoforge', version: '0.4.1'
    annotationProcessor group: "io.github.llamalad7", name: 'mixinextras-neoforge', version: '0.4.1'

    implementation "dev.ultreon.mods:xinexlib-neoforge-1.21.1:1.21.1-SNAPSHOT"

    jarJar('com.github.Nuix:jnode-fs:v1.0.1')
    implementation('com.github.Nuix:jnode-fs:v1.0.1')
    clientAdditionalRuntimeClasspath('com.github.Nuix:jnode-fs:v1.0.1')
    dataAdditionalRuntimeClasspath('com.github.Nuix:jnode-fs:v1.0.1')
    serverAdditionalRuntimeClasspath('com.github.Nuix:jnode-fs:v1.0.1')
}

sourceSets.main.resources { srcDir 'src/generated/resources' }
