package dev.ultreon.devices.util;

import com.google.common.collect.ImmutableList;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.jab125.version.Version;
import com.jab125.version.VersionPredicate;
import dev.ultreon.devices.Reference;
import dev.ultreon.devices.impl.util.Vulnerability;
import org.jetbrains.annotations.Nullable;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;

public class VulnerabilityUtil {
    public static List<Vulnerability> parseArray(JsonArray array) {
        ArrayList<Vulnerability> arraylist = new ArrayList<>() {
            @Override
            public boolean add(@Nullable Vulnerability vulnerability) {
                if (vulnerability != null) return super.add(vulnerability);
                return false;
            }
        };
        for (JsonElement jsonElement : array) {
            if (jsonElement.isJsonObject()) {
                arraylist.add(parseObject(jsonElement.getAsJsonObject()));
            }
        }
        return ImmutableList.copyOf(arraylist);
    }

    public static Vulnerability parseObject(JsonObject array) {
        boolean hasReporter = array.has("reporter");
        boolean hasDescription = array.has("description");
        boolean hasFixVersion = array.has("fixVersions");
        Collection<VersionPredicate> affectedVersions = toStringList(array.getAsJsonArray("affectedVersions"));
        var d = false;
        for (VersionPredicate affectedVersion : affectedVersions) {
            try {
                d = affectedVersion.test(Version.parse(Reference.getVerInfo()[0]));
                if (d) break;
            } catch (Exception e){e.printStackTrace();}
        }
        return new Vulnerability(hasReporter ? array.get("reporter").getAsString() : null, array.get("title").getAsString(), hasDescription ? array.get("description").getAsString() : null, array.get("severity").getAsInt(), affectedVersions, !hasFixVersion ? new ArrayList<>() : toStringList(array.get("fixVersions").getAsJsonArray()), d);
    }

    private static Collection<VersionPredicate> toStringList(JsonArray array) {
        ArrayList<String> l = new ArrayList<>();
        for (JsonElement jsonElement : array) {
            l.add(jsonElement.getAsString());
        }
        try {
            return VersionPredicate.parse(l);
        } catch (Exception e) {
            e.printStackTrace(); // oh no
            return new ArrayList<>();
        }
    }
}
