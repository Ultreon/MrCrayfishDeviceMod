package dev.ultreon.devices.api.util;

import com.jab125.version.VersionPredicate;
import dev.ultreon.devices.UltreonDevicesMod;
import dev.ultreon.devices.api.ApplicationManager;
import dev.ultreon.devices.api.app.Icons;
import dev.ultreon.devices.client.Display;
import dev.ultreon.devices.object.AppInfo;
import dev.ultreon.devices.object.TrayItem;
import org.jetbrains.annotations.Nullable;

import java.util.Collection;

public record Vulnerability(@Nullable String reporter, String title, @Nullable String description, int severity, Collection<VersionPredicate> affectedVersions, Collection<VersionPredicate> fixVersion, boolean affectsCurrentVersion) {
    @Override
    public String toString() {
        return "Vulnerability{" +
                "reporter='" + reporter + '\'' +
                ", title='" + title + '\'' +
                ", description='" + description + '\'' +
                ", severity=" + severity +
                ", affectedVersions=" + affectedVersions +
                ", fixVersion='" + fixVersion + '\'' +
                '}';
    }

    public String toPrettyString() {
        return """
                Vulnerability {
                  reporter         = '%s'
                  title            = '%s'
                  description      = '%s'
                  severity         = %s
                  affectedVersions = %s
                  fixVersion       = '%s'
                }""".formatted(reporter, title, description, severity, affectedVersions, fixVersion);
    }

    public static class VulnerabilityTrayItem extends TrayItem {
        public VulnerabilityTrayItem() {
            super(vulnerabilitiesAffectUs() ? Icons.WARNING : Icons.WARNING_GRAY, UltreonDevicesMod.res("vulnerabilities"));
        }
        private static boolean vulnerabilitiesAffectUs() {
            return UltreonDevicesMod.getVulnerabilities().stream().anyMatch(Vulnerability::affectsCurrentVersion);
        }
        private final boolean vulnerabilities = vulnerabilitiesAffectUs();
        private int tick;
        private boolean stat = false;

        @Override
        public void tick() {
            super.tick();
            if (!vulnerabilities) return;
            if (tick >= 15) {
                tick = 0;
                this.setIcon(stat ? Icons.FLASHED_WARNING : Icons.WARNING);
                stat = !stat;
            }
            tick++;
        }

        @Override
        public void handleClick(int mouseX, int mouseY, int mouseButton) {
            AppInfo info = ApplicationManager.getApplication(UltreonDevicesMod.res("vulnerability"));
            if (info != null) {
                Display.get().getOS().openApplication(info);
            }
        }
    }

    public int effectiveSeverity() {
        return affectsCurrentVersion ? severity : 0;
    }
}