//file:noinspection GradlePackageUpdate
architectury {
    common platforms.split(",")
}

sourceSets {
    api {
        java {
            srcDirs += [
                    "src/api/java"
            ]
        }
    }

    mineos {
        java {
            srcDirs += [
                    "src/mineos/java"
            ]
        }

        runtimeClasspath += sourceSets.api.output
        compileClasspath += sourceSets.api.output
    }

    main {
        resources {
            srcDirs += [
                    "src/main/generated/resources"
            ]
        }

        runtimeClasspath += sourceSets.api.output
        compileClasspath += sourceSets.api.output

        runtimeClasspath += sourceSets.mineos.output
        compileClasspath += sourceSets.mineos.output
    }
}

loom {
    accessWidenerPath = file "src/main/resources/devices.accesswidener"
}

repositories {
    maven { url = "https://cursemaven.com" }
}

dependencies {
    apiImplementation 'org.jetbrains:annotations:24.0.0'
    mineosImplementation 'org.jetbrains:annotations:24.0.0'
    mineosImplementation "org.apache.commons:commons-compress:1.26.1"

    // We depend on fabric loader here to use the fabric @Environment annotations and get the mixin dependencies
    // Do NOT use other classes from fabric loader
    modImplementation "net.fabricmc:fabric-loader:$fabric_loader_version"
    // Remove the next line if you don't want to depend on the API
    modApi "dev.architectury:architectury:$architectury_version"

    modApi "fuzs.forgeconfigapiport:forgeconfigapiport-common-neoforgeapi:$forgeconfigapiport_version"

    implementation project(":api")
    implementation "org.jetbrains.kotlin:kotlin-reflect:1.7.10"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:1.7.10"

    modCompileOnly "fuzs.forgeconfigapiport:forgeconfigapiport-common:8.0.0"
    modCompileOnly 'com.electronwill.night-config:core:3.6.3'
    modCompileOnly 'com.electronwill.night-config:toml:3.6.3'

    implementation("de.waldheinz:fat32-lib:0.6.5")
}

sourceSets {
    main {
        resources {
            srcDirs += [
                    "src/main/generated/resources"
            ]
            System.out.println(srcDirs)
        }
    }
}

jar {
    from("LICENSE") {
        rename { "${it}_${archivesBaseName}" }
    }

    from(sourceSets.api.output)
}

tasks.register("mineosJar", Jar) {
    archiveBaseName = "MineOS"
    archiveVersion = "1.0.0"
    archiveClassifier = null

    duplicatesStrategy = DuplicatesStrategy.EXCLUDE

    from("LICENSE") {
        rename { "${it}_MineOS" }
    }

    from(sourceSets.mineos.output)
}

publishing {
    publications {
        mavenCommon(MavenPublication) {
            artifactId = rootProject.archives_base_name
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
    }
    rootProject.setupRepositories(repositories)
}