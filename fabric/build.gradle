plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
}

version rootProject.version

architectury {
    platformSetupLoomIde()
    fabric()
}

loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath
    runs {
        data {
            inherit client
            name "Data Generation"
            vmArg "-Dfabric-api.datagen"
            vmArg "-Dfabric-api.datagen.output-dir=${file("../common/src/main/generated/resources")}"
            vmArg "-Dfabric-api.datagen.modid=devices"
   //         vmArg "-Dfabric-api.datagen.strict-validation"
            runDir "build/datagen"
        }
    }
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common
}

dependencies {
    modImplementation "net.fabricmc:fabric-loader:$fabric_loader_version"
    modApi "net.fabricmc.fabric-api:fabric-api:$fabric_api_version"
    // Remove the next line if you don't want to depend on the API
    modApi "dev.architectury:architectury-fabric:$architectury_version"

    implementation project(":api")

    include("io.github.ultreon:ubo:1.3.0")
    include("io.github.ultreon.corelibs:commons-v0:0.2.0")

    modApi "fuzs.forgeconfigapiport:forgeconfigapiport-fabric:$forgeconfigapiport_version"
    modImplementation 'com.electronwill.night-config:core:3.6.5'
    modImplementation 'com.electronwill.night-config:toml:3.6.5'
    modImplementation "com.github.Ultreon.advanced-debug:advanced-debug-fabric:$advanced_debug_version"
    implementation "io.github.spair:imgui-java-binding:1.86.10" // FIXME make dep an api(...) in advanced debug.

//    include(implementation("org.jetbrains.kotlin:kotlin-reflect:1.7.10"))
//    include(implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8:1.7.10"))
//    include(implementation("com.ultreon:ultranlang:0.1.0+6"))

    //shadowCommon "org.jetbrains.kotlin:kotlin-reflect:1.7.10"
    //shadowCommon "org.jetbrains.kotlin:kotlin-stdlib-jdk8:1.7.10"
//    shadowCommon "com.ultreon:ultranlang:0.1.0+6"

    modApi include("net.fabricmc:fabric-language-kotlin:1.8.2+kotlin.1.7.10")

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionFabric")) { transitive false }

    modCompileOnly "com.terraformersmc:modmenu:$modmenu_version", {
        exclude module: "fabric-api"
    }

    modRuntimeOnly "me.shedaniel:RoughlyEnoughItems-fabric:$rei_version", {
        exclude module: "fabric-api"
    }

  //  modApi "curse.maven:emojiful-284324:4672307"
}

configurations.all {
    resolutionStrategy {
        force("net.fabricmc:fabric-loader:$fabric_loader_version")
    }
}

processResources {
    inputs.property "version", rootProject.getIngameVersion()

    filesMatching("fabric.mod.json") {
        HashMap<String, ?> p = new HashMap<>()
        p.put("version", rootProject.getIngameVersion())
        p.put("description", rootProject.getModDescription())
        p.put("loaderVersion", rootProject.fabric_loader_version)
        p.put("minecraftVersion", rootProject.architectury.minecraft)
        expand(p)
    }
}

shadowJar {
    configurations = [project.configurations.shadowCommon]
    archiveClassifier = "dev-shadow"
}

remapJar {
    injectAccessWidener = true
    //noinspection GrDeprecatedAPIUsage
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    archiveClassifier = null
}

jar {
    archiveClassifier = "dev"
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenFabric(MavenPublication) {
            System.out.println(artifactId)
            artifactId = rootProject.archivesBaseName + "-fabric"
            //artifactId = rootProject.archives_base_name + "-fabric" + //project.name
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
    }
    rootProject.setupRepositories(repositories)
}
