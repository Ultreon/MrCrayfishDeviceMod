//file:noinspection GrDeprecatedAPIUsage
//file:noinspection GroovyAssignabilityCheck
plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
}

version rootProject.version

architectury {
    platformSetupLoomIde()
    forge()
}

loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath

    forge {
        convertAccessWideners = true
        extraAccessWideners.add loom.accessWidenerPath.get().asFile.name
    }
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common
}

dependencies {
    forge "net.minecraftforge:forge:$minecraft_version-$forge_version"
    // Remove the next line if you don't want to depend on the API
    modApi "dev.architectury:architectury-forge:$architectury_version"

    modApi "fuzs.forgeconfigapiport:forgeconfigapiport-forge:$forgeconfigapiport_version"

    forgeRuntimeLibrary project(":api")

    include forgeRuntimeLibrary("io.github.ultreon:ubo:1.3.0")
    include forgeRuntimeLibrary("io.github.ultreon.corelibs:commons-v0:0.2.0")

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionForge")) { transitive = false }

    forgeRuntimeLibrary "io.github.spair:imgui-java-binding:1.86.10" // FIXME make dep an api(...) in advanced debug.
    forgeRuntimeLibrary "io.github.spair:imgui-java-lwjgl3:1.86.10" // FIXME make dep an api(...) in advanced debug.
    implementation "io.github.spair:imgui-java-lwjgl3:1.86.10" // FIXME make dep an api(...) in advanced debug.
    minecraftNatives "io.github.spair:imgui-java-natives-linux:1.86.10" // FIXME make dep an api(...) in advanced debug.
    minecraftNatives "io.github.spair:imgui-java-natives-macos:1.86.10" // FIXME make dep an api(...) in advanced debug.
    minecraftNatives "io.github.spair:imgui-java-natives-windows:1.86.10" // FIXME make dep an api(...) in advanced debug.

//    forgeRuntimeLibrary "com.ultreon:ultranlang:0.1.0+6"
//    implementation include("com.ultreon:ultranlang:0.1.0+6")
}

processResources {
    inputs.property "version", rootProject.getIngameVersion()
    inputs.property "description", rootProject.getModDescription()
    System.out.println(inputs.getProperties())

    filesMatching("META-INF/mods.toml") {
        HashMap<String, ?> p = new HashMap<>()
        p.put("version", rootProject.getIngameVersion())
        p.put("description", rootProject.getModDescription())
        //noinspection GroovyAssignabilityCheck
        p.put("loaderVersion", rootProject.forge_version.split("\\.")[0])
        p.put("forgeVersion", rootProject.forge_version)
        p.put("minecraftVersion", rootProject.architectury.minecraft)
        expand(p)
    }
}

shadowJar {
    exclude "fabric.mod.json"
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowCommon]
    archiveClassifier = "dev-shadow"

//    relocate 'org.jetbrains.kotlin', "dev.ultreon.devices.shadow.org.jetbrains.kotlin"
//    relocate 'org.jetbrains.kotlinx', "dev.ultreon.devices.shadow.org.jetbrains.kotlinx"
//
//    relocate 'kotlin', "dev.ultreon.devices.shadow.kotlin"
//    relocate 'kotlinx', "dev.ultreon.devices.shadow.kotlinx"
}

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    archiveClassifier = null
}

jar {
    archiveClassifier = "dev"
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenForge(MavenPublication) {
            System.out.println(artifactId)
            artifactId = rootProject.archivesBaseName + "-forge"
            //artifactId = rootProject.archivesBaseName + "-forge" + //project.name
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
    }
    rootProject.setupRepositories(repositories)
}

