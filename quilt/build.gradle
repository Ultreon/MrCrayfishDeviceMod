plugins {
    id 'multiloader-loader'
    id 'fabric-loom'
}
dependencies {
    modImplementation "org.quiltmc:quilt-loader:$rootProject.quilt_loader_version"

    // Quilt Standard Libraries and QSL.
    modImplementation "org.quiltmc.quilted-fabric-api:quilted-fabric-api:$rootProject.quilted_fabric_api_version"

    minecraft "com.mojang:minecraft:${minecraft_version}"
    mappings loom.layered {
        officialMojangMappings()
        parchment("org.parchmentmc.data:parchment-${parchment_minecraft}:${parchment_version}@zip")
    }
    modImplementation "net.fabricmc:fabric-loader:${fabric_loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${fabric_version}"

    modImplementation "maven.modrinth:modmenu:${modmenu_version}"

    implementation(group: 'io.projectreactor', name: 'reactor-core', version: '3.5.5')
    include(implementation('com.github.Nuix:jnode-fs:v1.0.1'))

    modImplementation "fuzs.forgeconfigapiport:forgeconfigapiport-fabric:21.1.0"

    modImplementation "dev.ultreon.mods:xinexlib-fabric-1.21.1:0.1.0"
}

loom {
    def aw = project(':common').file("src/main/resources/${mod_id}.accesswidener")
    if (aw.exists()) {
        accessWidenerPath.set(aw)
    }
    mixin {
        defaultRefmapName.set("${mod_id}.refmap.json")
    }
    runs {
        client {
            client()
            setConfigName('Quilt Client')
            ideConfigGenerated(true)
            runDir('runs/client')
            vmArgs("-Dxinexlib.dev=true")
        }
        server {
            server()
            setConfigName('Quilt Server')
            ideConfigGenerated(true)
            runDir('runs/server')
            vmArgs("-Dxinexlib.dev=true")
        }
    }
}
